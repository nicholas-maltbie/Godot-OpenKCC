:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/doc/xml/scripts/OpenKCCBody3D.xml.

.. _class_OpenKCCBody3D:

OpenKCCBody3D
=============

**Inherits:** :ref:`RigidBody3D<class_RigidBody3D>` **<** :ref:`PhysicsBody3D<class_PhysicsBody3D>` **<** :ref:`CollisionObject3D<class_CollisionObject3D>` **<** :ref:`Node3D<class_Node3D>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`"scripts/character_openkcc_rigidbody.gd"<class_scripts_character_openkcc_rigidbody_gd>`

Implementation of the OpenKCC that uses the the :ref:`RigidBody3D<class_RigidBody3D>` to directly interact with the physics world.

.. rst-class:: classref-reftable-group

Properties
----------

.. table::
   :widths: auto

   +---------------------------------------------------------+------------------------------------------------------------------------+----------------------+
   | :ref:`Variant<class_Variant>`                           | :ref:`grounded_dist<class_OpenKCCBody3D_property_grounded_dist>`       | ``0.1``              |
   +---------------------------------------------------------+------------------------------------------------------------------------+----------------------+
   | :ref:`Variant<class_Variant>`                           | :ref:`max_walk_angle<class_OpenKCCBody3D_property_max_walk_angle>`     | ``60``               |
   +---------------------------------------------------------+------------------------------------------------------------------------+----------------------+
   | :ref:`float<class_float>`                               | :ref:`vertical_snap_up<class_OpenKCCBody3D_property_vertical_snap_up>` | ``0.3``              |
   +---------------------------------------------------------+------------------------------------------------------------------------+----------------------+
   | :ref:`float<class_float>`                               | :ref:`step_up_depth<class_OpenKCCBody3D_property_step_up_depth>`       | ``0.3``              |
   +---------------------------------------------------------+------------------------------------------------------------------------+----------------------+
   | :ref:`float<class_float>`                               | :ref:`margin<class_OpenKCCBody3D_property_margin>`                     | ``0.04``             |
   +---------------------------------------------------------+------------------------------------------------------------------------+----------------------+
   | :ref:`Vector3<class_Vector3>`                           | :ref:`up<class_OpenKCCBody3D_property_up>`                             | ``Vector3(0, 1, 0)`` |
   +---------------------------------------------------------+------------------------------------------------------------------------+----------------------+
   | :ref:`bool<class_bool>`                                 | :ref:`_ground_hit<class_OpenKCCBody3D_property__ground_hit>`           | ``false``            |
   +---------------------------------------------------------+------------------------------------------------------------------------+----------------------+
   | :ref:`Object<class_Object>`                             | :ref:`_ground_object<class_OpenKCCBody3D_property__ground_object>`     | ``null``             |
   +---------------------------------------------------------+------------------------------------------------------------------------+----------------------+
   | :ref:`float<class_float>`                               | :ref:`_ground_dist<class_OpenKCCBody3D_property__ground_dist>`         | ``0.0``              |
   +---------------------------------------------------------+------------------------------------------------------------------------+----------------------+
   | :ref:`float<class_float>`                               | :ref:`_ground_angle<class_OpenKCCBody3D_property__ground_angle>`       | ``0.0``              |
   +---------------------------------------------------------+------------------------------------------------------------------------+----------------------+
   | :ref:`Vector3<class_Vector3>`                           | :ref:`_ground_normal<class_OpenKCCBody3D_property__ground_normal>`     | ``Vector3(0, 0, 0)`` |
   +---------------------------------------------------------+------------------------------------------------------------------------+----------------------+
   | :ref:`Vector3<class_Vector3>`                           | :ref:`_ground_position<class_OpenKCCBody3D_property__ground_position>` | ``Vector3(0, 0, 0)`` |
   +---------------------------------------------------------+------------------------------------------------------------------------+----------------------+
   | :ref:`KinematicCollision3D<class_KinematicCollision3D>` | :ref:`_collision<class_OpenKCCBody3D_property__collision>`             | ``new()``            |
   +---------------------------------------------------------+------------------------------------------------------------------------+----------------------+

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`       | :ref:`_can_snap_up<class_OpenKCCBody3D_private_method__can_snap_up>`\ (\ distance_to_snap\: :ref:`float<class_float>`, momentum\: :ref:`Vector3<class_Vector3>`, position\: :ref:`Vector3<class_Vector3>`\ )          |
   +-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Vector3<class_Vector3>` | :ref:`_get_snap_down<class_OpenKCCBody3D_private_method__get_snap_down>`\ (\ position\: :ref:`Vector3<class_Vector3>`, dir\: :ref:`Vector3<class_Vector3>`, dist\: :ref:`float<class_float>`\ )                       |
   +-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`       | :ref:`_check_perpendicular_bounce<class_OpenKCCBody3D_private_method__check_perpendicular_bounce>`\ (\ hit\: :ref:`KinematicCollision3D<class_KinematicCollision3D>`, momentum\: :ref:`Vector3<class_Vector3>`\ )     |
   +-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | |void|                        | :ref:`check_grounded<class_OpenKCCBody3D_method_check_grounded>`\ (\ )                                                                                                                                                |
   +-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`       | :ref:`is_on_floor<class_OpenKCCBody3D_method_is_on_floor>`\ (\ )                                                                                                                                                      |
   +-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`       | :ref:`is_sliding<class_OpenKCCBody3D_method_is_sliding>`\ (\ )                                                                                                                                                        |
   +-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | |void|                        | :ref:`snap_to_ground<class_OpenKCCBody3D_method_snap_to_ground>`\ (\ )                                                                                                                                                |
   +-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | |void|                        | :ref:`move_and_slide<class_OpenKCCBody3D_method_move_and_slide>`\ (\ movement\: :ref:`Vector3<class_Vector3>`, stop_slide_up_walls\: :ref:`bool<class_bool>` = true, can_snap_up\: :ref:`bool<class_bool>` = false\ ) |
   +-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`     | :ref:`get_angle_factor<class_OpenKCCBody3D_method_get_angle_factor>`\ (\ angle_between\: :ref:`float<class_float>`\ )                                                                                                 |
   +-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Constants
---------

.. _class_OpenKCCBody3D_constant_DEFAULT_GROUNDED_HEIGHT:

.. rst-class:: classref-constant

**DEFAULT_GROUNDED_HEIGHT** = ``0.1`` :ref:`🔗<class_OpenKCCBody3D_constant_DEFAULT_GROUNDED_HEIGHT>`

Default grounded height for the character.

.. _class_OpenKCCBody3D_constant_DEFAULT_MAX_WALK_ANGLE:

.. rst-class:: classref-constant

**DEFAULT_MAX_WALK_ANGLE** = ``60`` :ref:`🔗<class_OpenKCCBody3D_constant_DEFAULT_MAX_WALK_ANGLE>`

Default max walking angle in degrees.

.. _class_OpenKCCBody3D_constant_MAX_BOUNCES:

.. rst-class:: classref-constant

**MAX_BOUNCES** = ``5`` :ref:`🔗<class_OpenKCCBody3D_constant_MAX_BOUNCES>`

Maximum number of bounces when player computes sliding.

.. _class_OpenKCCBody3D_constant_BUFFER_SHOVE_RADIANS:

.. rst-class:: classref-constant

**BUFFER_SHOVE_RADIANS** = ``3.14159`` :ref:`🔗<class_OpenKCCBody3D_constant_BUFFER_SHOVE_RADIANS>`

Buffer for shoving angle when normalizing bounce in radians.

.. _class_OpenKCCBody3D_constant_MAX_SHOVE_RADIANS:

.. rst-class:: classref-constant

**MAX_SHOVE_RADIANS** = ``1.5708`` :ref:`🔗<class_OpenKCCBody3D_constant_MAX_SHOVE_RADIANS>`

Maximum shove angle when normalizing bounce in radians.

.. _class_OpenKCCBody3D_constant_EPSILON:

.. rst-class:: classref-constant

**EPSILON** = ``0.001`` :ref:`🔗<class_OpenKCCBody3D_constant_EPSILON>`

Small value for buffer values.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Property Descriptions
---------------------

.. _class_OpenKCCBody3D_property_grounded_dist:

.. rst-class:: classref-property

:ref:`Variant<class_Variant>` **grounded_dist** = ``0.1`` :ref:`🔗<class_OpenKCCBody3D_property_grounded_dist>`

Distance at which player is considered on the ground and no longer falling, defaults to :ref:`DEFAULT_GROUNDED_HEIGHT<class_OpenKCCBody3D_constant_DEFAULT_GROUNDED_HEIGHT>`.

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCBody3D_property_max_walk_angle:

.. rst-class:: classref-property

:ref:`Variant<class_Variant>` **max_walk_angle** = ``60`` :ref:`🔗<class_OpenKCCBody3D_property_max_walk_angle>`

Maximum angle at which the player can walk up slopes in degrees, defaults to :ref:`DEFAULT_MAX_WALK_ANGLE<class_OpenKCCBody3D_constant_DEFAULT_MAX_WALK_ANGLE>`.

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCBody3D_property_vertical_snap_up:

.. rst-class:: classref-property

:ref:`float<class_float>` **vertical_snap_up** = ``0.3`` :ref:`🔗<class_OpenKCCBody3D_property_vertical_snap_up>`

Vertical snap up distance the player can snap up.

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCBody3D_property_step_up_depth:

.. rst-class:: classref-property

:ref:`float<class_float>` **step_up_depth** = ``0.3`` :ref:`🔗<class_OpenKCCBody3D_property_step_up_depth>`

Minimum depth required for a stair when moving onto a step.

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCBody3D_property_margin:

.. rst-class:: classref-property

:ref:`float<class_float>` **margin** = ``0.04`` :ref:`🔗<class_OpenKCCBody3D_property_margin>`

Margin of distance for player to maintain between objects. Will attempt to be at minimum this distance from any other objects during movement.

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCBody3D_property_up:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **up** = ``Vector3(0, 1, 0)`` :ref:`🔗<class_OpenKCCBody3D_property_up>`

Direction of up for the character

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCBody3D_property__ground_hit:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **_ground_hit** = ``false`` :ref:`🔗<class_OpenKCCBody3D_property__ground_hit>`

Did the player hit the ground within :ref:`grounded_dist<class_OpenKCCBody3D_property_grounded_dist>` distance.

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCBody3D_property__ground_object:

.. rst-class:: classref-property

:ref:`Object<class_Object>` **_ground_object** = ``null`` :ref:`🔗<class_OpenKCCBody3D_property__ground_object>`

What object did the player hit on the ground (if any).

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCBody3D_property__ground_dist:

.. rst-class:: classref-property

:ref:`float<class_float>` **_ground_dist** = ``0.0`` :ref:`🔗<class_OpenKCCBody3D_property__ground_dist>`

Distance player is from the ground.

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCBody3D_property__ground_angle:

.. rst-class:: classref-property

:ref:`float<class_float>` **_ground_angle** = ``0.0`` :ref:`🔗<class_OpenKCCBody3D_property__ground_angle>`

Angle player is making between ground normal and vertical.

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCBody3D_property__ground_normal:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **_ground_normal** = ``Vector3(0, 0, 0)`` :ref:`🔗<class_OpenKCCBody3D_property__ground_normal>`

Ground normal vector from collision.

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCBody3D_property__ground_position:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **_ground_position** = ``Vector3(0, 0, 0)`` :ref:`🔗<class_OpenKCCBody3D_property__ground_position>`

Position in which player collider hit the ground.

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCBody3D_property__collision:

.. rst-class:: classref-property

:ref:`KinematicCollision3D<class_KinematicCollision3D>` **_collision** = ``new()`` :ref:`🔗<class_OpenKCCBody3D_property__collision>`

Internal variable for computing collisions

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_OpenKCCBody3D_private_method__can_snap_up:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **_can_snap_up**\ (\ distance_to_snap\: :ref:`float<class_float>`, momentum\: :ref:`Vector3<class_Vector3>`, position\: :ref:`Vector3<class_Vector3>`\ ) :ref:`🔗<class_OpenKCCBody3D_private_method__can_snap_up>`

Check if a player's final position after snapping up would be valid. Returns true if valid, false if the player hits an object or the step is too narrow. See :ref:`step_up_depth<class_OpenKCCBody3D_property_step_up_depth>` for step depth requirements.  

\ ``distance_to_snap`` - How far should the player be snapped up. 

\ ``momentum`` - Remaining momentum of player after snapping up. 

\ ``position`` - position of player before snapping up.

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCBody3D_private_method__get_snap_down:

.. rst-class:: classref-method

:ref:`Vector3<class_Vector3>` **_get_snap_down**\ (\ position\: :ref:`Vector3<class_Vector3>`, dir\: :ref:`Vector3<class_Vector3>`, dist\: :ref:`float<class_float>`\ ) :ref:`🔗<class_OpenKCCBody3D_private_method__get_snap_down>`

Get the distance a place is from the ground and returns the movement in order to place the player on the ground.  

\ ``position`` - Position to start player from. 

\ ``dir`` - Direction to snap the player. 

\ ``dist`` - Maximum distance to check for snapping.

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCBody3D_private_method__check_perpendicular_bounce:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **_check_perpendicular_bounce**\ (\ hit\: :ref:`KinematicCollision3D<class_KinematicCollision3D>`, momentum\: :ref:`Vector3<class_Vector3>`\ ) :ref:`🔗<class_OpenKCCBody3D_private_method__check_perpendicular_bounce>`

Check if a bounce is perpendicular by computing a raycast from slightly behind the ``hit`` in the direction of ``momentum``. Will return true if the bounce is mostly perpendicular, aka, hit a vertical surface, false otherwise. This is used to check if the player is able to snap up a step.  

\ ``hit`` - Hit information from player collision. 

\ ``momentum`` = Player direction of movement.

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCBody3D_method_check_grounded:

.. rst-class:: classref-method

|void| **check_grounded**\ (\ ) :ref:`🔗<class_OpenKCCBody3D_method_check_grounded>`

Check the current grounded state of the player, will update the grounded state variables based on the result of the check. Checks by invoking :ref:`PhysicsBody3D.test_move()<class_PhysicsBody3D_method_test_move>` in the down direction for :ref:`grounded_dist<class_OpenKCCBody3D_property_grounded_dist>`. If something is hit, the player's grounded state will be updated with the collision result.

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCBody3D_method_is_on_floor:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_on_floor**\ (\ ) :ref:`🔗<class_OpenKCCBody3D_method_is_on_floor>`

Is the player currently on the floor. Grounded state is updated by :ref:`check_grounded()<class_OpenKCCBody3D_method_check_grounded>` which is called after each :ref:`move_and_slide()<class_OpenKCCBody3D_method_move_and_slide>`

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCBody3D_method_is_sliding:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_sliding**\ (\ ) :ref:`🔗<class_OpenKCCBody3D_method_is_sliding>`

Is the player sliding. Player will be considered sliding if the player is both :ref:`is_on_floor()<class_OpenKCCBody3D_method_is_on_floor>` and the :ref:`_ground_angle<class_OpenKCCBody3D_property__ground_angle>` is greater than the :ref:`max_walk_angle<class_OpenKCCBody3D_property_max_walk_angle>`.

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCBody3D_method_snap_to_ground:

.. rst-class:: classref-method

|void| **snap_to_ground**\ (\ ) :ref:`🔗<class_OpenKCCBody3D_method_snap_to_ground>`

Snap the player to the ground, will check if the player is within :ref:`vertical_snap_up<class_OpenKCCBody3D_property_vertical_snap_up>` from the floor. If so, the player will snap up to the position.

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCBody3D_method_move_and_slide:

.. rst-class:: classref-method

|void| **move_and_slide**\ (\ movement\: :ref:`Vector3<class_Vector3>`, stop_slide_up_walls\: :ref:`bool<class_bool>` = true, can_snap_up\: :ref:`bool<class_bool>` = false\ ) :ref:`🔗<class_OpenKCCBody3D_method_move_and_slide>`

Move and slide the player by some movement vector. Will start off by checking if the player is overlapping with any objects and push out before attempting any movement.  Then, the movement will be computed, the player will bounce off of any surfaces and slide along the plane. This movement is limited to a maximum of :ref:`MAX_BOUNCES<class_OpenKCCBody3D_constant_MAX_BOUNCES>` bounces at most. Remaining momentum will be decreased after each bounce depending on how sharp the bounce was. For example, walking directly into a wall will result in no sliding. While glancing off a surface at a 30 degree angle will result in retaining most of the momentum.  Once the player has finished movement, the grounded state will be updated by invoking :ref:`check_grounded()<class_OpenKCCBody3D_method_check_grounded>`  *This is expected to be called within a physics update, otherwise the behavior may not behave as expected.*  

\ ``movement`` - Player movement in world space. 

\ ``stop_slide_up_walls`` - Should sliding up vertical surfaces be prevented. 

\ ``can_snap_up`` - If vertical snapping is enabled, should the player be able to snap up as part of this movement command.

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCBody3D_method_get_angle_factor:

.. rst-class:: classref-method

:ref:`float<class_float>` **get_angle_factor**\ (\ angle_between\: :ref:`float<class_float>`\ ) :ref:`🔗<class_OpenKCCBody3D_method_get_angle_factor>`

Get the angle factor, how much momentum should be kept after a bounce at a given angle. Will return a value between 0 and 1 with 1 representing keeping all the momentum, and zero means the player should stop.  

\ ``angle_between`` - Angle between player and collision surface.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
.. |void| replace:: :abbr:`void (No return value.)`
