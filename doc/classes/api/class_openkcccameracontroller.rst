:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/doc/xml/doc_classes/OpenKCCCameraController.xml.

.. _class_OpenKCCCameraController:

OpenKCCCameraController
=======================

**Inherits:** :ref:`Node3D<class_Node3D>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

Camera controller for OpenKCC character.

.. rst-class:: classref-introduction-group

Description
-----------

Camera controller for OpenKCC character that can manage pitch, yaw, zoom, and vertical damping.

.. rst-class:: classref-reftable-group

Properties
----------

.. table::
   :widths: auto

   +---------------------------+--------------------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>` | :ref:`bounded_zoom_distance<class_OpenKCCCameraController_property_bounded_zoom_distance>` | ``1.0``   |
   +---------------------------+--------------------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>` | :ref:`damping_factor<class_OpenKCCCameraController_property_damping_factor>`               | ``1.0``   |
   +---------------------------+--------------------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>` | :ref:`max_pitch<class_OpenKCCCameraController_property_max_pitch>`                         | ``90.0``  |
   +---------------------------+--------------------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>` | :ref:`max_zoom<class_OpenKCCCameraController_property_max_zoom>`                           | ``5.0``   |
   +---------------------------+--------------------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>` | :ref:`min_pitch<class_OpenKCCCameraController_property_min_pitch>`                         | ``-90.0`` |
   +---------------------------+--------------------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>` | :ref:`min_zoom<class_OpenKCCCameraController_property_min_zoom>`                           | ``0.0``   |
   +---------------------------+--------------------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>` | :ref:`pitch<class_OpenKCCCameraController_property_pitch>`                                 | ``0.0``   |
   +---------------------------+--------------------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>` | :ref:`yaw<class_OpenKCCCameraController_property_yaw>`                                     | ``0.0``   |
   +---------------------------+--------------------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>` | :ref:`zoom<class_OpenKCCCameraController_property_zoom>`                                   | ``0.0``   |
   +---------------------------+--------------------------------------------------------------------------------------------+-----------+

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +-------------------------------+----------------------------------------------------------------------------------------------------+
   | :ref:`Vector3<class_Vector3>` | :ref:`get_target_position<class_OpenKCCCameraController_method_get_target_position>`\ (\ ) |const| |
   +-------------------------------+----------------------------------------------------------------------------------------------------+
   | :ref:`Vector3<class_Vector3>` | :ref:`get_target_rotation<class_OpenKCCCameraController_method_get_target_rotation>`\ (\ ) |const| |
   +-------------------------------+----------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Property Descriptions
---------------------

.. _class_OpenKCCCameraController_property_bounded_zoom_distance:

.. rst-class:: classref-property

:ref:`float<class_float>` **bounded_zoom_distance** = ``1.0`` :ref:`ðŸ”—<class_OpenKCCCameraController_property_bounded_zoom_distance>`

.. rst-class:: classref-property-setget

- :ref:`float<class_float>` **get_bounded_zoom_distance**\ (\ )

The bounded camera zoom if it hit an object. Distance between camera source and target position.

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCCameraController_property_damping_factor:

.. rst-class:: classref-property

:ref:`float<class_float>` **damping_factor** = ``1.0`` :ref:`ðŸ”—<class_OpenKCCCameraController_property_damping_factor>`

.. rst-class:: classref-property-setget

- |void| **set_damping_factor**\ (\ value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_damping_factor**\ (\ )

The damping factor for managing camera vertical movement.

A value of zero will disable damping.

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCCameraController_property_max_pitch:

.. rst-class:: classref-property

:ref:`float<class_float>` **max_pitch** = ``90.0`` :ref:`ðŸ”—<class_OpenKCCCameraController_property_max_pitch>`

.. rst-class:: classref-property-setget

- |void| **set_max_pitch**\ (\ value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_max_pitch**\ (\ )

Maximum pitch bound (in degrees).

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCCameraController_property_max_zoom:

.. rst-class:: classref-property

:ref:`float<class_float>` **max_zoom** = ``5.0`` :ref:`ðŸ”—<class_OpenKCCCameraController_property_max_zoom>`

.. rst-class:: classref-property-setget

- |void| **set_max_zoom**\ (\ value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_max_zoom**\ (\ )

Maximum zoom bound.

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCCameraController_property_min_pitch:

.. rst-class:: classref-property

:ref:`float<class_float>` **min_pitch** = ``-90.0`` :ref:`ðŸ”—<class_OpenKCCCameraController_property_min_pitch>`

.. rst-class:: classref-property-setget

- |void| **set_min_pitch**\ (\ value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_min_pitch**\ (\ )

Minimum pitch bound (in degrees).

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCCameraController_property_min_zoom:

.. rst-class:: classref-property

:ref:`float<class_float>` **min_zoom** = ``0.0`` :ref:`ðŸ”—<class_OpenKCCCameraController_property_min_zoom>`

.. rst-class:: classref-property-setget

- |void| **set_min_zoom**\ (\ value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_min_zoom**\ (\ )

Maximum zoom bound.

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCCameraController_property_pitch:

.. rst-class:: classref-property

:ref:`float<class_float>` **pitch** = ``0.0`` :ref:`ðŸ”—<class_OpenKCCCameraController_property_pitch>`

.. rst-class:: classref-property-setget

- |void| **set_pitch**\ (\ value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_pitch**\ (\ )

Current pitch value for camera. When set will be bounded between :ref:`min_pitch<class_OpenKCCCameraController_property_min_pitch>` and :ref:`max_pitch<class_OpenKCCCameraController_property_max_pitch>`.

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCCameraController_property_yaw:

.. rst-class:: classref-property

:ref:`float<class_float>` **yaw** = ``0.0`` :ref:`ðŸ”—<class_OpenKCCCameraController_property_yaw>`

.. rst-class:: classref-property-setget

- |void| **set_yaw**\ (\ value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_yaw**\ (\ )

Current yaw value for camera. When set will be bounded using modulus between 0 and 360 degrees.

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCCameraController_property_zoom:

.. rst-class:: classref-property

:ref:`float<class_float>` **zoom** = ``0.0`` :ref:`ðŸ”—<class_OpenKCCCameraController_property_zoom>`

.. rst-class:: classref-property-setget

- |void| **set_zoom**\ (\ value\: :ref:`float<class_float>`\ )
- :ref:`float<class_float>` **get_zoom**\ (\ )

Current zoom value for camera. When set will be bounded between :ref:`min_zoom<class_OpenKCCCameraController_property_min_zoom>` and :ref:`max_zoom<class_OpenKCCCameraController_property_max_zoom>`.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_OpenKCCCameraController_method_get_target_position:

.. rst-class:: classref-method

:ref:`Vector3<class_Vector3>` **get_target_position**\ (\ ) |const| :ref:`ðŸ”—<class_OpenKCCCameraController_method_get_target_position>`

Get the target camera position. Will use the damping factor and is based on the 3D world space. Updated as part of process every frame. Will draw a ray from the camera origin position out and stop the

target at the point of collision.

.. rst-class:: classref-item-separator

----

.. _class_OpenKCCCameraController_method_get_target_rotation:

.. rst-class:: classref-method

:ref:`Vector3<class_Vector3>` **get_target_rotation**\ (\ ) |const| :ref:`ðŸ”—<class_OpenKCCCameraController_method_get_target_rotation>`

Get the target camera attitude as a set of euler angles. This is just the combined pitch and yaw in the x and y components of the vector.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
.. |void| replace:: :abbr:`void (No return value.)`
