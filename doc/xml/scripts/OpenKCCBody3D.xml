<?xml version="1.0" encoding="UTF-8" ?>
<class name="OpenKCCBody3D" inherits="RigidBody3D" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		Implementation of the OpenKCC that uses the the [RigidBody3D] to directly interact with the physics world.
	</brief_description>
	<description>
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="_can_snap_up">
			<return type="bool" />
			<param index="0" name="distance_to_snap" type="float" />
			<param index="1" name="momentum" type="Vector3" />
			<param index="2" name="position" type="Vector3" />
			<description>
				Check if a player's final position after snapping up would be valid. Returns true if valid, false if the player hits an object or the step is too narrow. See [member OpenKCCBody3D.step_up_depth] for step depth requirements.  [br] [param distance_to_snap] - How far should the player be snapped up. [br] [param momentum] - Remaining momentum of player after snapping up. [br] [param position] - position of player before snapping up.
			</description>
		</method>
		<method name="_get_snap_down">
			<return type="Vector3" />
			<param index="0" name="position" type="Vector3" />
			<param index="1" name="dir" type="Vector3" />
			<param index="2" name="dist" type="float" />
			<description>
				Get the distance a place is from the ground and returns the movement in order to place the player on the ground.  [br] [param position] - Position to start player from. [br] [param dir] - Direction to snap the player. [br] [param dist] - Maximum distance to check for snapping.
			</description>
		</method>
		<method name="_check_perpendicular_bounce">
			<return type="bool" />
			<param index="0" name="hit" type="KinematicCollision3D" />
			<param index="1" name="momentum" type="Vector3" />
			<description>
				Check if a bounce is perpendicular by computing a raycast from slightly behind the [param hit] in the direction of [param momentum]. Will return true if the bounce is mostly perpendicular, aka, hit a vertical surface, false otherwise. This is used to check if the player is able to snap up a step.  [br] [param hit] - Hit information from player collision. [br] [param momentum] = Player direction of movement.
			</description>
		</method>
		<method name="check_grounded">
			<return type="void" />
			<description>
				Check the current grounded state of the player, will update the grounded state variables based on the result of the check. Checks by invoking [method PhysicsBody3D.test_move] in the down direction for [member OpenKCCBody3D.grounded_dist]. If something is hit, the player's grounded state will be updated with the collision result.
			</description>
		</method>
		<method name="is_on_floor">
			<return type="bool" />
			<description>
				Is the player currently on the floor. Grounded state is updated by [method  OpenKCCBody3D.check_grounded] which is called after each [method  OpenKCCBody3D.move_and_slide]
			</description>
		</method>
		<method name="is_sliding">
			<return type="bool" />
			<description>
				Is the player sliding. Player will be considered sliding if the player is both [method OpenKCCBody3D.is_on_floor] and the [member OpenKCCBody3D._ground_angle] is greater than the [member OpenKCCBody3D.max_walk_angle].
			</description>
		</method>
		<method name="snap_to_ground">
			<return type="void" />
			<description>
				Snap the player to the ground, will check if the player is within [member OpenKCCBody3D.vertical_snap_up] from the floor. If so, the player will snap up to the position.
			</description>
		</method>
		<method name="move_and_slide">
			<return type="void" />
			<param index="0" name="movement" type="Vector3" />
			<param index="1" name="stop_slide_up_walls" type="bool" default="true" />
			<param index="2" name="can_snap_up" type="bool" default="false" />
			<description>
				Move and slide the player by some movement vector. Will start off by checking if the player is overlapping with any objects and push out before attempting any movement.  Then, the movement will be computed, the player will bounce off of any surfaces and slide along the plane. This movement is limited to a maximum of [constant MAX_BOUNCES] bounces at most. Remaining momentum will be decreased after each bounce depending on how sharp the bounce was. For example, walking directly into a wall will result in no sliding. While glancing off a surface at a 30 degree angle will result in retaining most of the momentum.  Once the player has finished movement, the grounded state will be updated by invoking [method OpenKCCBody3D.check_grounded]  [i]This is expected to be called within a physics update, otherwise the behavior may not behave as expected.[/i]  [br] [param movement] - Player movement in world space. [br] [param stop_slide_up_walls] - Should sliding up vertical surfaces be prevented. [br] [param can_snap_up] - If vertical snapping is enabled, should the player be able to snap up as part of this movement command.
			</description>
		</method>
		<method name="get_angle_factor">
			<return type="float" />
			<param index="0" name="angle_between" type="float" />
			<description>
				Get the angle factor, how much momentum should be kept after a bounce at a given angle. Will return a value between 0 and 1 with 1 representing keeping all the momentum, and zero means the player should stop.  [br] [param angle_between] - Angle between player and collision surface.
			</description>
		</method>
	</methods>
	<members>
		<member name="grounded_dist" type="Variant" setter="" getter="" default="0.1">
			Distance at which player is considered on the ground and no longer falling, defaults to [constant DEFAULT_GROUNDED_HEIGHT].
		</member>
		<member name="max_walk_angle" type="Variant" setter="" getter="" default="60">
			Maximum angle at which the player can walk up slopes in degrees, defaults to [constant DEFAULT_MAX_WALK_ANGLE].
		</member>
		<member name="vertical_snap_up" type="float" setter="" getter="" default="0.3">
			Vertical snap up distance the player can snap up.
		</member>
		<member name="step_up_depth" type="float" setter="" getter="" default="0.3">
			Minimum depth required for a stair when moving onto a step.
		</member>
		<member name="margin" type="float" setter="" getter="" default="0.04">
			Margin of distance for player to maintain between objects. Will attempt to be at minimum this distance from any other objects during movement.
		</member>
		<member name="up" type="Vector3" setter="" getter="" default="Vector3(0, 1, 0)">
			Direction of up for the character
		</member>
		<member name="_ground_hit" type="bool" setter="" getter="" default="false">
			Did the player hit the ground within [member OpenKCCBody3D.grounded_dist] distance.
		</member>
		<member name="_ground_object" type="Object" setter="" getter="" default="null">
			What object did the player hit on the ground (if any).
		</member>
		<member name="_ground_dist" type="float" setter="" getter="" default="0.0">
			Distance player is from the ground.
		</member>
		<member name="_ground_angle" type="float" setter="" getter="" default="0.0">
			Angle player is making between ground normal and vertical.
		</member>
		<member name="_ground_normal" type="Vector3" setter="" getter="" default="Vector3(0, 0, 0)">
			Ground normal vector from collision.
		</member>
		<member name="_ground_position" type="Vector3" setter="" getter="" default="Vector3(0, 0, 0)">
			Position in which player collider hit the ground.
		</member>
		<member name="_collision" type="KinematicCollision3D" setter="" getter="" default="new()">
			Internal variable for computing collisions
		</member>
	</members>
	<constants>
		<constant name="DEFAULT_GROUNDED_HEIGHT" value="0.1">
			Default grounded height for the character.
		</constant>
		<constant name="DEFAULT_MAX_WALK_ANGLE" value="60">
			Default max walking angle in degrees.
		</constant>
		<constant name="MAX_BOUNCES" value="5">
			Maximum number of bounces when player computes sliding.
		</constant>
		<constant name="BUFFER_SHOVE_RADIANS" value="3.14159">
			Buffer for shoving angle when normalizing bounce in radians.
		</constant>
		<constant name="MAX_SHOVE_RADIANS" value="1.5708">
			Maximum shove angle when normalizing bounce in radians.
		</constant>
		<constant name="EPSILON" value="0.001">
			Small value for buffer values.
		</constant>
	</constants>
</class>
